#!/bin/bash
#
# Bash script to create an encrypted tar archive of a given directory.
# Supports files and folders exclusions listed in the excluded.txt file
#
# SYNOPSIS
# - ./encrypt-backup /path/from/files/ /path/to/destination/ /path/to/passwordfile
#
# AUTHOR: 
# encrypt-backup is written by Alfio Salanitri www.alfiosalanitri.it and are licensed under the MIT License.
# it has been modified by Joseph Persie to do the following:
#   * Automatically encrypt
#   * Remove exclusion option
#   * Take a password file argument instead of a gpg interactive prompt

#############################################################
# Icons	and color
# https://www.techpaste.com/2012/11/print-colored-text-background-shell-script-linux/
# https://apps.timwhitlock.info/emoji/tables/unicode
#############################################################
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NOCOLOR='\033[0m'
ICON_OK='\xE2\x9C\x94'
ICON_KO='\xe2\x9c\x97'
ICON_WAIT='\xE2\x8C\x9B'
ICON_ROCKET='\xF0\x9F\x9A\x80'


# user input args
BACKUP_SOURCE=$(readlink -f $1)
BACKUP_DESTINATION=$(readlink -f $2)
PASSWORD_FILE=$(readlink -f $3)
# convert source path to string. Es.: /path/to/Source Dir to path-to-Source-Dir
FILENAME_PREFIX=$(echo $BACKUP_SOURCE | sed -e 's/\//-/g;s/ /-/g;s/^-\(.*\)-$/\1/')

# check required arguments
if [ ! -d "$BACKUP_SOURCE" ]; then
  printf "[${RED}${ICON_KO}${NOCOLOR}] Sorry, but ${GREEN}Backup source directory${NOCOLOR} doesn't exist.\n"
  exit 1
fi
if [ ! -d "$BACKUP_DESTINATION" ]; then
  printf "[${RED}${ICON_KO}${NOCOLOR}] Sorry, but ${GREEN}Backup destination directory${NOCOLOR} doesn't exist.\n" 
  exit 1
fi
if [ ! -f "$PASSWORD_FILE" ]; then
	printf "[${RED}${ICON_KO}${NOCOLOR}] Sorry, but ${GREEN}password file${NOCOLOR} doesn't exist.\n"
	exit 1
fi

printf "\n[${YELLOW}${ICON_WAIT}${NOCOLOR}] Compressing source path, please wait...\n"
BACKUP_FILENAME="${BACKUP_DESTINATION}/eb${FILENAME_PREFIX}-$(date +%d%m%Y-%H%M).tar"
printf "[${GREEN}${ICON_OK}${NOCOLOR}] Source path compressed.\n\n"
printf "\n[${YELLOW}${ICON_WAIT}${NOCOLOR}] Attempting to backup to file: ${YELLOW}${BACKUP_FILENAME}${NOCOLOR}\n"
if tar -c --recursion "$BACKUP_SOURCE" | gpg --yes --batch -c --passphrase-fd 3 -o "$BACKUP_FILENAME" 3< $PASSWORD_FILE; then
	printf "[${GREEN}${ICON_OK}${NOCOLOR}] Successfully created backup file: ${GREEN}${BACKUP_FILENAME}${NOCOLOR}\n"
	printf "\n[${YELLOW}${ICON_WAIT}${NOCOLOR}] Attempting to decrypt backup file for safety reasons. Your backup file will stay encrypted in the process and afterwards.\n"
	
	if gpg -o /dev/null --yes --batch --passphrase-fd 3 -d "${BACKUP_FILENAME}" 3< $PASSWORD_FILE; then
		printf "[${GREEN}${ICON_OK}${NOCOLOR}] Backup file is decryptable with given password.\n"
		exit 0
	else
		printf "[${RED}${ICON_KO}${NOCOLOR}] Attempt to decrypt backup file failed!\n"
		exit 1
	fi
else
	printf "[${RED}${ICON_KO}${NOCOLOR}] Something went wrong while creating backup file!\n"
	exit 1
fi
printf "[${GREEN}${ICON_ROCKET}${NOCOLOR}] Archive encrypted with success.\n"
exit 0
